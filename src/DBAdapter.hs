module DBAdapter where

import Database.SQLite.Simple
import Control.Monad.IO.Class
import Control.Monad.Trans.Reader(ReaderT, asks, ask)
import Servant
import Data.String
import Data.Maybe(listToMaybe, isJust)

import Models.Website
import Models.User
import Config

type AppM m = ReaderT Config m

-- | Initialize database with tables if do not already exist
initDB :: AppM IO ()
initDB = do
  config <- ask
  liftIO $ do 
    initQuery <- readFile (initFile config)
    withConnection (dbFile config) (`execute_` fromString initQuery)

-- | Execute an action on the database
dbExec :: (Connection -> IO a) -> AppM Handler a
dbExec f = do 
  file <- asks dbFile
  liftIO $ withConnection file f

dbAddMessage :: String -> Connection -> IO ()
dbAddMessage msg conn = execute conn "INSERT INTO messages VALUES (?)" (Only msg)

dbGetMessages :: Connection -> IO [String]
dbGetMessages conn = let result = query_ conn "SELECT msg FROM messages"
                     in fmap (map fromOnly) result

-- | Add a website to the database. ID field is generated by database
dbAddWebsite :: Website -> Connection -> IO ()
dbAddWebsite website conn = execute conn insertWebsite (url website, hash website)
  where insertWebsite = "INSERT INTO Websites (URL, LastUpdate, Hash) VALUES (?, NOW(), ?)"


-- | Add a new user to the database, if username is not already in use.
--   ID is generated by the database. 
dbAddUser :: User -> Connection -> IO Bool
dbAddUser user conn = do
    maybeUser <- dbGetUser (username user) conn 
    if isJust maybeUser 
      then return False
      else do 
            execute conn insertUser (username user, password user)
            (== 1) <$> changes conn
  where insertUser = "INSERT INTO Users (Username, Password) VALUES (?, ?)"

-- | Lookup user with given username, if it does not exist Nothing is returned
dbGetUser :: String -> Connection -> IO (Maybe User)
dbGetUser name conn = do
    result <- query conn lookupUser (Only name)
    return $ listToMaybe result
  where lookupUser = "SELECT (UserID, Username, Password) FROM Users WHERE Username = ?"

-- | Add notification token for user to database
dbAddToken :: User -> String -> Connection -> IO ()
dbAddToken user token conn = do
    execute conn insertToken (idUser user, token)
  where insertToken = "INSERT INTO NotificationTokens (UserID, Token) VALUES (?, ?)"