module DBAdapter where

import Database.SQLite.Simple
import Control.Monad.IO.Class
import Control.Monad.Trans.Reader(asks, ask, mapReaderT)
import Servant
import Data.String
import Data.Maybe(listToMaybe, isJust)
import Data.List.Split

import Models.Website
import qualified Models.User as UM
import Config

-- | Initialize database with tables if do not already exist
initDB :: AppM IO ()
initDB = do
  config <- ask
  liftIO $ do 
    initQuery <- readFile (initFile config)
    withConnection (dbFile config) (\conn -> mapM_ (execute_ conn) $ splitQuery initQuery)

splitQuery :: String -> [Query]
splitQuery = map fromString . splitOn ";"

liftDbAction :: (Connection -> IO a) -> AppM Handler a
liftDbAction = mapReaderT liftIO . exec

-- | Execute an action on the database
exec :: (Connection -> IO a) -> AppM IO a
exec f = do 
  file <- asks dbFile
  liftIO $ withConnection file f


-- | Add a website to the database. ID field is generated by database
addWebsite :: Website -> Connection -> IO ()
addWebsite website conn = execute conn insertWebsite (url website, hash website)
  where insertWebsite = "INSERT INTO Websites (URL, LastUpdate, Hash) VALUES (?, NOW(), ?)"

-- | Returns all websites that are in the database
getWebsites :: Connection -> IO [Website]
getWebsites conn = query_ conn allWebsites
  where allWebsites = "SELECT * FROM Websites"

-- | Check if website hash has changed, returns True if it has changed or website is not found
checkWebsiteHash :: Int -> Int -> Connection -> IO Bool
checkWebsiteHash websiteID newHash conn = do 
    result <- query conn checkHash (websiteID, newHash) :: IO [Only Int]
    let (Only count) = head result
    return $ count == 0
  where checkHash = "SELECT COUNT() FROM Websites WHERE WebsiteID = ? AND Hash = ?"

-- | Update the hash for the given websiteID
updateWebsiteHash :: Int -> Int -> Connection -> IO Bool
updateWebsiteHash websiteID newHash conn = do
    execute conn updateHash (newHash, websiteID)
    (== 1) <$> changes conn
  where updateHash = "UPDATE Websites SET Hash = ?, LastUpdate = NOW() WHERE WebsiteID = ?"


{-| Add a new user to the database, if username is not already in use.
     ID is generated by the database. -}
addUser :: UM.User -> Connection -> IO Bool
addUser user conn = do
    maybeUser <- getUser (UM.username user) conn 
    if isJust maybeUser 
      then return False
      else do 
            execute conn insertUser (UM.username user, UM.password user)
            (== 1) <$> changes conn
  where insertUser = "INSERT INTO Users (Username, Password) VALUES (?, ?)"

-- | Lookup user with given username, if it does not exist Nothing is returned
getUser :: String -> Connection -> IO (Maybe UM.User)
getUser name conn = do
    result <- query conn lookupUser (Only name)
    return $ listToMaybe result
  where lookupUser = "SELECT UserID, Username, Password FROM Users WHERE Username = ?"

-- | Add notification token for user to database
addToken :: UM.User -> String -> Connection -> IO ()
addToken user token conn =
    execute conn insertToken (UM.id user, token)
  where insertToken = "INSERT INTO NotificationTokens (UserID, Token) VALUES (?, ?)"